---
title: "Extracting information from omics data workshop"
abstract: |
  The intro to the workshop! Here we have a look at some QC and do some 
  differential gene expression
---

## Load libraries

```{r}
#| warning: false
#| message: false
library(dplyr)
library(ggplot2)
library(ggthemes)
library(DESeq2)
library(tximport)
library(pheatmap)
library(gprofiler2)
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(ggrepel)
library(tibble)
library(purrr)
library(readr)
library(here)
library(apeglm)
library(biomaRt)
library(AnnotationHub)
library(memes)
library(TFBSTools)
library(JASPAR2024)
library(universalmotif)
```

Libraries not loading? We use `renv` to manage our packages in this project, so you can run `renv::restore()` in the console to set up the package environment from the renv.lock file. Note that `renv` is a nice way of making sure that you're using no just the right packages, but the right versions of those packages. Check out the renv docs [here](https://rstudio.github.io/renv/articles/renv.html) for more informations and guides.

## A quick interlude - set up GitHub if needed

When you try to push your changes RStudio will probably prompt you for your GitHub username and password. If that works and the push is successful when great, you can skip this chunck, but if you you can quickly set up Git and a PAT token to be able to push your changes.

```{r}
#| eval: false
library(gitcreds)
library(usethis)
# Give Git your name and email to sign your commits
usethis::use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")
# Make a pat token to be able to push to github recommended setting are "user" 
# "repo" and "workflow", which should be enabled by default
usethis::create_github_token()
```

Copy your token to your clipboard and then run:

```{r}
#| eval: false
gitcreds::gitcreds_set()
```

And paste the token in. You should be able to make pushes to your forked repo now (hopefully!) Refer to the excellent [Happy Git with R](https://happygitwithr.com/https-pat) guide if needed or for more info.

## Load the RNA-Seq data

We already pre-processed the RNA-Seq and ATAC-Seq data using nf-core/fetchngs, nf-core/rnaseq and nf-core/atacseq. We looked at the MultiQC reports to get an initial idea of the quality of the data.\

\
Now we'll load the RNA-Seq data to start to get an impression of what might be special about the brain endothelial cells and see if we can re-produce some of the results from the manuscript.

Do you know the difference between absolute and relative file paths..? Maybe have a look at the `here` package docs [here](https://here.r-lib.org/)!

```{r}
tx2genefile = '~/Sophie-EBI-Omics/data/count_tables/tx2gene.tsv'
tx2gene = read.delim(tx2genefile, header=FALSE)[, 1:3]

directory_path <- here::here("data/count_tables")
files = list.files(path = directory_path,pattern = "quant.sf", recursive = TRUE, full.names = TRUE)

txi = tximport(files, type="salmon", tx2gene=tx2gene)
samples = sapply(files, function(path) {basename(dirname(path))})
condition = sapply(files, function(path) {
  folder_name <- basename(dirname(path))
  sub("([123]-.*)", "", folder_name)
})

data = data.frame(condition = condition)
rownames(data) = samples

data
```

We use the DeSeq2 library to perform differential gene expression analysis and also to normalise our counts for making plots such as PCA, heatmaps .etc

```{r}
dds <- DESeqDataSetFromTximport(txi, colData=data, design=~condition)
dds <- DESeq(dds)
vsd <- vst(dds, blind=TRUE)
# this gives log2(n + 1)
ntd <- normTransform(dds)
```

```{r}
pcaData <- plotPCA(vsd, intgroup="condition", returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=condition)) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  coord_fixed() +
  theme_few()
```

We were worried about cell stress pathways as these samples were collected directly after FACs sorting. Let's look at highly expressed genes in each condition and see if these are enriched in stress-related GO terms.

```{r}
select <- order(rowMeans(counts(dds,normalized=TRUE)),
                decreasing=TRUE)[1:300]
top300 <- as.data.frame(assay(ntd)[select,])

go_enrich = gost(rownames(top300), organism = "mmusculus",ordered_query = TRUE)
gostplot(go_enrich, interactive = TRUE)
```

```{r}
# modify the g:Profiler data frame
gp_mod = go_enrich$result[,c("query", "source", "term_id",
                                "term_name", "p_value", "query_size", 
                                "intersection_size", "term_size", 
                                "effective_domain_size")]
gp_mod$GeneRatio = paste0(gp_mod$intersection_size,  "/", gp_mod$query_size)
gp_mod$BgRatio = paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)

names(gp_mod) = c("Cluster", "Category", "ID", "Description", "p.adjust", 
                    "query_size", "Count", "term_size", "effective_domain_size", 
                    "GeneRatio", "BgRatio")

row.names(gp_mod) = gp_mod$ID

# define as enrichResult object
gp_mod_enrich  = new("enrichResult", result = gp_mod)
enrichplot::dotplot(gp_mod_enrich)
```

#### **Q) What do you think? Do our cells seem stressed?**

Now lets look for genes enriched in brain endothelial cells compared to lung or liver...

```{r}
res = results(dds)
resultsNames(dds)
```

We want genes that are overexpressed in brain compared to both lung and liver. In this set up this will be represented by genes that have a negative log2FoldChange in the comparisons named above.\
\
What kind of thresholds should we use for log2FoldChange and adjusted p value? Another visualization can help us to decide, let's have a look at volcano plots for both comparisons..\

```{r}
foldchange=0.5
pval=0.05

PlotVolcano <-function(comparison){
  de = lfcShrink(dds, coef=comparison, type="apeglm")
  resul = as.data.frame(de)
  resul$geneID <- rownames(resul)
  de <- merge(resul, tx2gene, by.x = "geneID", by.y = "V2", all.x = TRUE, all.y = FALSE)
  
  de = de %>% dplyr::filter(!is.na(log2FoldChange)) %>% dplyr::select(-V1) %>% unique()
  
  # get numbers of diff genes for labelling
  n_unchanged <- de %>% dplyr::filter(log2FoldChange < foldchange & log2FoldChange > -(foldchange)) %>% nrow()
  n_up <- de %>% dplyr::filter(log2FoldChange >= foldchange & padj < pval) %>% nrow()
  n_down <- de %>% dplyr::filter(log2FoldChange <= -(foldchange) & padj < pval) %>% nrow()
  
  de$diffexpressed <- paste0("Unchanged (",n_unchanged,")")
  de$diffexpressed[de$log2FoldChange >= foldchange & de$padj < pval] <- paste0("Up (",n_up,")")
  de$diffexpressed[de$log2FoldChange <= -(foldchange) & de$padj < pval] <- paste0("Down (",n_down,")")
  
  # set colours vector
  if (n_up == 0 & n_down == 0){
      cvec = c("#84A1AB")
  } else if (n_up == 0){
      cvec = c("#B02302", "#84A1AB")
  } else if (n_down == 0){
      cvec = c("#84A1AB", "#61B002")
  } else {
      cvec = c("#B02302", "#84A1AB", "#61B002")
  }
  
  # label genes that are differentially expressed
  de$delabel <- NA
  de$delabel[de$diffexpressed != "NO"] <- de$V3[de$diffexpressed != "NO"]
  de=de[order(de$padj),]
  
  
  # Volcano plot
  ggplot(data=de, aes(x=log2FoldChange, y=-log10(padj), label=delabel)) +
          geom_vline(xintercept=c(-(foldchange), foldchange), col="light grey", linetype="dashed") +
          geom_hline(yintercept=-log10(pval), col="light grey", linetype="dashed") +
          geom_point(aes(color=diffexpressed), alpha=0.5) +
          geom_text_repel(data=de[1:50,],aes(x = log2FoldChange, y = -log10(padj),label=V3),max.overlaps=50) +
          scale_color_manual(values=cvec) +
          theme_few() +theme(aspect.ratio=1)
}
```

```{r}
PlotVolcano("condition_LG_vs_BR")
```

```{r}
PlotVolcano("condition_LV_vs_BR")
```

#### **Q) Do these thresholds seem reasonable?**

Let's look at genes that are overexpressed in brain compared to both lung and liver. We will perform the GO analysis again to see what kind of gene networks they are a part of.\

```{r}
brainliver = lfcShrink(dds, coef="condition_LV_vs_BR", type="apeglm") %>%
  as.data.frame() %>%
  filter(padj<0.001 & log2FoldChange <= -2) %>%
  rownames()
brainlung = lfcShrink(dds, coef="condition_LG_vs_BR", type="apeglm") %>%
  as.data.frame() %>%
  filter(padj<0.001 & log2FoldChange <= -2) %>%
  rownames()

length(brainlung)
length(brainliver)

# get genes that appear in both lists
brain_enriched = intersect(brainlung,brainliver) %>% unique()
length(brain_enriched)

# as a control set for later, lets pick out some liver enriched genes
liver_enriched = lfcShrink(dds, coef="condition_LV_vs_BR", type="apeglm") %>%
  as.data.frame() %>%
  filter(padj<0.001 & log2FoldChange >= 2) %>%
  rownames() %>% unique
length(liver_enriched)

```

```{r}
go_enrich = gost(brain_enriched, organism = "mmusculus")
gostplot(go_enrich, interactive = TRUE)
```

```{r}
# modify the g:Profiler data frame
gp_mod = go_enrich$result[,c("query", "source", "term_id",
                                "term_name", "p_value", "query_size", 
                                "intersection_size", "term_size", 
                                "effective_domain_size")]
gp_mod$GeneRatio = paste0(gp_mod$intersection_size,  "/", gp_mod$query_size)
gp_mod$BgRatio = paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)

names(gp_mod) = c("Cluster", "Category", "ID", "Description", "p.adjust", 
                    "query_size", "Count", "term_size", "effective_domain_size", 
                    "GeneRatio", "BgRatio")

row.names(gp_mod) = gp_mod$ID

# define as enrichResult object
gp_mod_enrich  = new("enrichResult", result = gp_mod)
gp_mod
barplot(gp_mod_enrich, showCategory = 40, font.size = 16) + 
  ggplot2::facet_grid(~Cluster) +
  ggplot2::ylab("Intersection size")
```

# Integrating ATAC-Seq

We also have ATAC-seq data - notice one of the outputs from nf-core/atacseq is to label ATAC-seq peaks to their nearest gene - this is more of an art than science.\
\
You can read [the documentation](https://nf-co.re/atacseq/2.1.2) to find out how it was done - note this step:

5.  Annotate peaks relative to gene features ([`HOMER`](http://homer.ucsd.edu/homer/download.html))

Can you find out what settings were used? by looking at the Github repo we can find the code of the [HOMER AnnotatePeaks module](https://github.com/nf-core/atacseq/blob/2.1.2/modules/nf-core/homer/annotatepeaks/main.nf).

Extra arguments are passed in the args variable which in pipelines is usually set in conf/modules.config. We can see that the only extra arg that is set is '-gid', when we look at the HOMER documentation we can't actually find this parameter, it takes some extra googling to find this means "use gene_id instead of transcript_id when parsing GTF file". Welcome to bioinformatics! ;)\
\
In the nextflow module code we can see the version of HOMER used is homer=4.11 - so we have used whatever the default params are for HOMER v.4.11. We can learn about these by reading HOMER annotatepeaks docs.

```{r}
atac_annot = read.delim("data/count_tables/consensus_peaks.mRp.clN.annotatePeaks.txt")
colnames(atac_annot)
```

Let's look at the distance to nearest PromoterID

```{r}
options(scipen = 999)
ggplot(atac_annot,aes(x=Distance.to.TSS)) + geom_density() + theme_few()
```

Some peaks seem implausibly far from genes, let's restrict to +/- 2000 nt away - how many peaks do we lose?

```{r}
filt_atac_annot = atac_annot %>% filter(abs(Distance.to.TSS) <= 2000)
```

Are any of these ATAC peaks associated with our unique brain genes?

```{r}
filt_atac_annot = filt_atac_annot %>% mutate(brain_enriched=Entrez.ID %in% brain_enriched, liver_enriched=Entrez.ID %in% liver_enriched)
filt_atac_annot %>%
  group_by(brain_enriched) %>% 
  summarise(total=n())

filt_atac_annot %>%
  group_by(liver_enriched) %>% 
  summarise(total=n())
```

Let's get the sequences of these ATAC peaks to see if we can identify TF(s) that might regulate our brain-specific genes.

```{r}
brain_peaks = makeGRangesFromDataFrame(filt_atac_annot %>% filter(brain_enriched==TRUE), keep.extra.columns = TRUE)
liver_peaks = makeGRangesFromDataFrame(filt_atac_annot %>% filter(liver_enriched==TRUE), keep.extra.columns = TRUE)
```

How long are our peaks generally? Should we expand/reduce them?

```{r}
hist(end(brain_peaks) - start(brain_peaks))
```

Let's take them as they are for now, but might be worth resizing to make them shorter.

Let's merge overlapping peaks - do we have any?

```{r}
length(brain_peaks)
brain_peaks = GenomicRanges::reduce(brain_peaks)
length(brain_peaks)
```

(We could resize our peaks at this point but in the manuscript they don't)\
Here we load the mouse genome, then get sequences.

```{r}
#| eval: true
ah <- AnnotationHub()
query(ah, c("Mus musculus","Ensembl","twobit"))
mouse.genome = ah[["AH49773"]]
```

```{r}
#| eval: true
brain_peaks_Seqs = memes::get_sequence(brain_peaks, mouse.genome)
liver_peaks_Seqs = memes::get_sequence(liver_peaks, mouse.genome)
brain_peaks_Seqs 
```

```{r}
#| eval: true
dreme_out <- runDreme(brain_peaks_Seqs, liver_peaks_Seqs,outdir = tempdir())
```

```{r}
#| eval: true
dreme_out
```

```{r}
#| eval: true
dreme_out$motif %>% 
  purrr::map(universalmotif::view_motifs) %>% 
  purrr::imap(~{
    .x +
      ggtitle(paste(.y, "Motifs")) +
      theme(plot.title = element_text(hjust = 0.5, size = 14))
  }) %>% 
  patchwork::wrap_plots(ncol = 2) 

```

```{r}
#| eval: true
# convert the top motif to a PWM matrix
unknown_pwm   = convert_motifs(dreme_out$motif[[1]],"TFBSTools-PWMatrix")

# extract motifs corresponding to human transcription factors
JASPAR2024 <- JASPAR2024()
JASPAR2024 <- RSQLite::dbConnect(RSQLite::SQLite(), db(JASPAR2024))
pwm_library = TFBSTools::getMatrixSet(
  JASPAR2024,
  opts=list(
    collection = 'CORE',
    species    = 'Mus musculus',
    matrixtype = 'PWM'
  ))

# find the most similar motif to our motif
pwm_sim = PWMSimilarity(
  # JASPAR library
  pwm_library, 
  # out motif
  unknown_pwm,
  # measure for comparison
  method = 'Pearson')

# extract the motif names from the pwm library
pwm_library_list = lapply(pwm_library, function(x){
  data.frame(ID = ID(x), name = name(x))
})

# combine the list into one data frame
pwm_library_dt = dplyr::bind_rows(pwm_library_list)

# fetch the similarity of each motif to our unknown motif
pwm_library_dt$similarity = pwm_sim[pwm_library_dt$ID]

# find the most similar motif in the library
pwm_library_dt = pwm_library_dt[order(-pwm_library_dt$similarity),]

head(pwm_library_dt)
```

Is Nfe2l2/Nrf2 brain-specific in our RNA-Seq data?

```{r}
#| eval: true
as.data.frame(assay(ntd)) %>%
  filter(row.names(as.data.frame(assay(ntd))) %in% c("ENSMUSG00000015839"))
```

Maybe Nrf2 is important for blood brain barrier integrity -\> <https://www.jneurosci.org/content/27/38/10240.short>

# Data for the PPI

For the protein-protein interaction networks we want the differential gene lists for our various contrasts.

```{r}
#| eval: false
# Remind ourselves of the conditions we have
unique(dds@colData$condition)
# So we could get these contrast one by one:
lg_vs_br <- results(dds, contrast = c("condition", "LG", "BR")) |>
  as.data.frame() |>
  dplyr::mutate(contrast = "LG_vs_BR") |>
  tibble::rownames_to_column(var = "gene")
lv_vs_br <- results(dds, contrast = c("condition", "LV", "BR")) |>
  as.data.frame() |>
  dplyr::mutate(contrast = "LV_vs_BR") |>
  tibble::rownames_to_column(var = "gene")
lg_vs_lv <- results(dds, contrast = c("condition", "LG", "LV")) |>
  as.data.frame() |>
  dplyr::mutate(contrast = "LV_vs_BR") |>
  tibble::rownames_to_column(var = "gene")

# Merge results to list
results_list <- list(lg_vs_br, lv_vs_br, lg_vs_lv) |>
  purrr::set_names(c("lg_vs_br"), "lv_vs_br", "lg_vs_lv")
```

Note that repetitive code is generally a bad sign suggesting you should stop and consider making a more generalisable function that you can reuse. This functional code will be much easier to make changes to and reduces the chance of errors being introduced when copy pasting code around (did you notice the error in the above chunk?). A rule of thumb is to stop if you find yourself copying the same code more than 3 times, but it's always good practise to try and make your code as generalisable as possible, so you and others can more easily reuse it!

The above block only has 3 repetitive bits where we process the 3 contrasts in the same way, but you can see how this quickly become tedious and messy, imagine if we had more contrasts! For the sake of practise, can you make a function that will do this for an arbitrary number of contrasts?

```{r}
# Add your code to functionalise the extraction of results dataframes from dds 
# here
```

Now if this was single cell seq data we'd normally do this kind of analysis per celltype, typically using a differential gene list from a case vs controls disease condition. In this case we have samples from different sources, so we'll combine the contrasts using the same sample (i.e. brain vs lung and brain vs liver) merging the pvals and log fold changes.

Don't worry if this code is a little complex!

```{r}
# Get the levels of the condition
conditions <- levels(dds$condition)

# Function to perform pairwise comparisons and return results as a data frame
pairwise_comparison <- function(cond1, cond2) {
  res <- results(dds, contrast = c("condition", cond1, cond2))
  as.data.frame(res) %>%
    rownames_to_column(var = "gene") %>%
    dplyr::select(gene, padj, log2FoldChange)
}

 # Function to combine results for a specific condition
combine_condition_results <- function(condition, results_list) {
  results_list %>%
    reduce(~ left_join(.x, .y, by = "gene")) %>%
    dplyr::mutate(
      min_padj = pmin(!!!dplyr::select(., starts_with("padj"))),
      mean_log2FoldChange = rowMeans(dplyr::select(., starts_with("log2FoldChange")))
    ) %>%
    dplyr::select(gene, min_padj, mean_log2FoldChange) %>%
    arrange(min_padj) %>%
    dplyr::mutate(condition = condition)
}

# Create a list of all pairwise comparisons for each condition
all_comparisons <- map(conditions, ~map(setdiff(conditions, .x), pairwise_comparison, .x))
# Combine results for each condition and rank by p-value
condition_specific_genes <- map2(conditions, all_comparisons, combine_condition_results) |>
  bind_rows()
```

```{r}
res <- dplyr::filter(condition_specific_genes, min_padj < 0.05)
# Check output
head(res)
str(res)
# Get number of sig genes per contrast
table(res$condition)

# Save data
readr::write_tsv(res, here::here("data/ppi/differential_genes.tsv"))
```

# Data for MAGMA

Now for MAGMA we want some gene lists that are most specific to our three groups, and people typically use either the top 5% or 10% as a proportion of the total number of genes, but let's add the top 1% as well just to see how stable any results we see are.

Before we do this, MAGMA requires genes in the entrez format, so we'll have to swap from the ensembl IDs we currently have.

```{r}
#| eval: false
# Choose a mirror for ensembl - try a different one if you get errors
ensembl <- useEnsembl(biomart = "ensembl", mirror = "www")

# Select the mouse and human datasets from the chosen Ensembl mirror
mouse <- useDataset("mmusculus_gene_ensembl", mart = ensembl)
human <- useDataset("hsapiens_gene_ensembl", mart = ensembl)

# Convert Ensembl IDs to Entrez IDs for all the genes in the df
genes <- unique(condition_specific_genes$gene)
entrez_ids <-
  getLDS(
    attributes = c('ensembl_gene_id'),
    filters = 'ensembl_gene_id',
    values = genes,
    mart = mouse,
    attributesL = c("entrezgene_id"),
    martL = human
  )
# Remove rows with NA Entrez IDs if present
entrez_ids <- entrez_ids[!is.na(entrez_ids$entrezgene_id), ]

# Get unique Ensembl-Entrez pairs by keeping the first occurrence
entrez_ids <- entrez_ids[!duplicated(entrez_ids$ensembl_gene_id), ]
# Merge the data frames to include only genes with Entrez IDs
results_list_entrez <-
  dplyr::left_join(condition_specific_genes,
                   unique(entrez_ids),
                   by = join_by(gene == ensembl_gene_id))
```

If you get a server error when using bioMart, or it's taking too long we can manually download the current mouse ensembl IDs and their human orthologues, plus the human IDs and the corresponding entrez IDs and do it the old fashioned way...

You can manually download the needed files from ensembl [here](https://www.ensembl.org/biomart/martview/36e75d7104c3e03ac8414d5a564d1485).

```{r}
# Get human and mouse IDs
human_ids <- readr::read_tsv(here::here("data/human_mart_export.txt")) |>
  janitor::clean_names()
mouse_ids <- readr::read_tsv(here::here("data/mouse_mart_export.txt")) |>
  janitor::clean_names()

# Merge IDs
joined_ids <- mouse_ids |>
  dplyr::left_join(
    human_ids,
    by = join_by(human_gene_stable_id == gene_stable_id),
    relationship = "many-to-many"
  ) |>
  dplyr::mutate(entrez_id = as.character(ncbi_gene_formerly_entrezgene_id)) |>
  dplyr::select(gene_stable_id, entrez_id) |>
  dplyr::filter(!is.na(entrez_id)) |>
  unique()

# Get unique Ensembl-Entrez pairs by keeping the first occurrence
entrez_ids <- joined_ids[!duplicated(joined_ids$gene_stable_id),]

results_list_entrez <- condition_specific_genes |>
    dplyr::left_join(entrez_ids, by = join_by(gene == gene_stable_id)) |>
    dplyr::filter(!is.na(entrez_id))
```

Now we can get our top 10/5/1% of genes by pval for each contrast.

```{r}
# Get all genes in this data - save for PPI background
all_genes <- rownames(txi$counts)
readr::write_lines(all_genes, here::here("data/ppi/background_genes.txt"))
# Get the total number of genes for MAGMA
total_gene_n <- length(all_genes)
# Set percentages to get
percentages <- c(10, 5, 1)

results_list_entrez <- results_list_entrez |>
  split(results_list_entrez$condition)

# Rank genes and select top percentages for each comparison ordered by pval
top_genes_list <- map(results_list_entrez, ~.x[order(.x$min_padj), ]) %>%
  map(function(res_ordered) {
    map(percentages, function(percentage) {
      # Number of genes to get based on %
      top_n <- ceiling(total_gene_n * (percentage / 100))
      # Return the dataframe with the number of genes and a column of the %
      res_ordered |>
        # exclude duplicated entrez_ids
        dplyr::distinct(entrez_id, .keep_all = TRUE) |>
        dplyr::mutate(percent_genes = percentage) |>
        head(top_n) 
    })
  })

# Flatten the nested list to have a simple list where each element is a top 
# gene list
top_genes_list <- flatten(top_genes_list)
```

MAGMA wants an input file with each row denoting a group to test (in single cell seq data this is typically celltypes). The row starts with the group label followed by a space and then a space separated list of the entrez IDs, so now we get our data into that format and save each percent to a different file.

```{r}
#| results: hide
#| message: false
# Merge list to one df and take the relevant columns
magma_genes <- purrr::list_rbind(top_genes_list) |>
  dplyr::select(entrez_id, condition, percent_genes)

head(magma_genes)

# Split the dataframe by the percent column
dfs_by_percent <- split(magma_genes, magma_genes$percent_genes)

# Create a file for each percent
lapply(names(dfs_by_percent), function(percent) {
  # Subset the dataframe for the current percent
  subset_df <- dfs_by_percent[[percent]]
  
  # Split the subset by group
  groups <- split(subset_df$entrez_id, subset_df$condition)
  
  # Create lines for each group with the format: group_label ID1 ID2 ID3 ...
  lines <- sapply(names(groups), function(group) {
    paste(group, paste(groups[[group]], collapse = " "))
  }, USE.NAMES = FALSE)
  
  # Write to a file named by the percent value
  writeLines(lines, con = here::here("data/magma", paste0("magma_input_genes_", percent, "_percent.magma.txt")))
})
```
